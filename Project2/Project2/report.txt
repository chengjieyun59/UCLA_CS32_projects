Project 2 report by Jie-Yun Cheng

/////////////////////////////////////////////
// PART A: Design of my doubly linked list //
/////////////////////////////////////////////

Professor Nachenberg said that dummy node may be confusing at first, but once you understand it, it saves a lot of time and lines of code, but he never used it, because it’s not as straightforward. The TA for discussion 1E also said it saves lines.

I designed a doubly linked list as required. To reduce the number of special cases that I have to handle (like empty map or tail points to nullptr), I included a dummy node and made the list circular, inspired by 1E TA during her discussion. This would also make insertion way easier as I didn’t have to check for nullptr and consider edge cases. And since the nodes inserted don’t need to be in chronological order, this wouldn’t be a problem. So my list nodes aren’t in any particular order. My nodes contain a pointer to head, next, and prev. So my head -> next points to the first element and head -> prev points to the last element, if you have the say what’s first and what’s last in a circular linked list.

///////////////////////////////////////////////////
// PART B: Pseudocode for non-trivial algorithms //
///////////////////////////////////////////////////

0. constructor
Construct the dummy node
Make the head’s previous point to head itself
Make the head’s next point to head itself
// This creates an empty map

1. destructor
make a pointer p that points to the dummy node
while haven’t exhausted the linked list
    save p into temp
    make p points to its previous node
    delete temp
    iterate

2. copy constructor
take in the source parameter
construct the dummy node
assign the current head to temp
assign the source to temp source
while hasn't looped through the whole list
    create a newNode so enough nodes can be allocated to hold a whole duplicate of the original list
    copy the key and value of temp source into newNode
    doubly link the newNode and temp
    assign newNode to temp
    iterate
make the list circular

3. assignment operator
make sure the left hand side isn’t equal to the right hand side
    declare a temp map that holds the right hand side
    use the swap function so the left hand side now holds temp
return

4. insert
if the list doesn’t contain the key
    create a node p that points to the first element
    store key and value into node p
    put p after head by creating/ reassigning the four linkers
    size increases by one
    return true since key could be added and had been added
return false otherwise

5. update
make node p point to the first element
loop through the nodes as long as the list isn’t exhausted
    if key is found at that node
    	update the node’s value
    	return true now that value is updated
return false otherwise

6. insertOrUpdate
if the list doesn’t contain the key
    insert the key and value
    return true now that key and value are inserted
otherwise if the list contains the key, update the value in the same node
return true now that value is updated

7. erase
make node p point to the first element
loop through the whole list until it's empty or key is found
if p ends up pointing at head
    return false because the key wasn’t found after looping through the whole list
else
    assign p -> next to its previous node's next pointer
    assign p -> prev to its next node's previous pointer
    destruct
    size decreases by one
return true now that the node is erased

8. contains
loop through the whole list
    if key is found
        return true
return false

9. get (with 2 parameters)
loop through the whole list
    if key is found
        let the value parameter take the value in the node
        return true now that the value is gotten
return false if key isn’t found after exhausting the list

10. get (with 3 parameters)
if index i is out of bound
    return false
create node p that points to head
loop through the first i element
    move to the next node
    iterate
get the key and value at index i
return true now that the key and value are found

11. swap
create a temp node and size
save the current head to temp
save the inputted parameter head to the current head
save the temp to the inputted parameter head

12. combine



13. subtract



////////////////////////
// PART C: Test cases //
////////////////////////
    // test empty function
    Map a;
    assert(a.empty());
    
    // test size function
    assert(a.size() == 0);

    // test insert function
    a.insert("A", 10);
    a.insert("B", 44);
    a.insert("C", 10);
    string all;
    double total = 0;
    
    // test get function with 2 parameters
    Map m;  // maps strings to doubles
    ValueType v = -1234.5;
    assert( !m.get("abc", v)  &&  v == -1234.5); // v unchanged by get failure
    m.insert("xyz", 9876.5);
    assert(m.size() == 1);
    KeyType k = "hello";
    assert(m.get(0, k, v)  &&  k == "xyz"  &&  v == 9876.5);
    
    // test get function with 3 parameters
    for (int n = 0; n < a.size(); n++)
    {
        string k;
        double v;
        a.get(n, k, v);
        all += k;
        total += v;
    } // must result in the output being exactly one of the following: ABC64, ACB64, BAC64, BCA64, CAB64, or CBA64
    cout << all << total; // would print CBA64 for my circular doubly linked list
    
    // test swap function
    Map m1;
    m1.insert("Fred", 2.956);
    Map m2;
    m2.insert("Ethel", 3.538);
    m2.insert("Lucy", 2.956);
    m1.swap(m2);

    // test contains function
    assert(m1.size() == 2  &&  m1.contains("Ethel")  &&  m1.contains("Lucy")  &&
           m2.size() == 1  &&  m2.contains("Fred"));
    
    // test erase function
    Map gpas;
    gpas.insert("Fred", 2.956);
    assert(!gpas.contains(""));
    gpas.insert("Ethel", 3.538);
    double va;
    string k1;
    assert(gpas.get(1,k1,va)  &&  (k1 == "Fred"  ||  k1 == "Ethel"));
    string k2;
    assert(gpas.get(1,k2,va)  &&  k2 == k1);
    gpas.insert("", 4.000);
    gpas.insert("Lucy", 2.956);
    assert(gpas.contains(""));
    gpas.erase("Fred");
    assert(gpas.size() == 3  &&  gpas.contains("Lucy")  &&  gpas.contains("Ethel")  &&
           gpas.contains(""));
    
    // test a combination of functions
    Map m3;
    assert(!m3.erase("Ricky"));
    assert(m3.insert("Fred", 123));
    assert(m3.insert("Ethel", 456));
    assert(m3.size() == 2);
    v = 42;
    assert(!m3.get("Lucy", v)  &&  v == 42);
    assert(m3.get("Fred", v)  &&  v == 123);
    v = 42;
    KeyType x = "Lucy";
    assert(m3.get(0, x, v)  &&
           ((x == "Fred"  &&  v == 123)  ||  (x == "Ethel"  &&  v == 456)));
    KeyType x2 = "Ricky";
    assert(m3.get(1, x2, v)  && ((x2 == "Fred"  &&  v == 123)  ||  (x2 == "Ethel"  &&  v == 456))  && x != x2);
    
    // test update function
    m3.update("Fred", 999);
    assert(m3.get(0, x, v)  &&
           ((x == "Fred"  &&  v == 999)  ||  (x == "Ethel"  &&  v == 456)));
    
    // test insertOrUpdate function
    m3.insertOrUpdate("Fred", 555);
    assert(m3.get(0, x, v)  &&
           ((x == "Fred"  &&  v == 555)  ||  (x == "Ethel"  &&  v == 456)));
    m3.insertOrUpdate("Mariam", 333);
    assert(m3.get(0, x, v)  &&
           ((x == "Mariam"  &&  v == 333)  ||  (x == "Ethel"  &&  v == 456)));
    
    // test combine function case 1
    Map m100;
    assert(m100.insert("Fred", 123) && m100.insert("Ethel", 456) && m100.insert("Lucy", 789));
    Map m200;
    assert(m200.insert("Lucy", 789) && m200.insert("Ricky", 321));
    Map result300;
    // result may not be empty when fed in
    assert(result300.insert("Lucy", 789) && result300.insert("Ricky", 321));
    assert(combine(m100, m200, result300) == true);
    KeyType k300;
    ValueType v300;
    assert(result300.contains("Fred") && result300.get("Fred", v300) == true && v300 == 123);
    assert(result300.contains("Ricky") && result300.get("Ricky", v300) == true && v300 == 321);
    assert(result300.contains("Lucy") && result300.get("Lucy", v300) == true && v300 == 789);
    assert(result300.contains("Ethel") && result300.get("Ethel", v300) == true && v300 == 456);

    // test combine function case 2
    assert(m200.update("Lucy", 654));
    assert(combine(m100, m200, result300) == false);
    assert(result300.contains("Fred") && result300.get("Fred", v300) == true && v300 == 123);
    assert(result300.contains("Ricky") && result300.get("Ricky", v300) == true && v300 == 321);
    assert(result300.contains("Lucy") == false);
    assert(result300.contains("Ethel") && result300.get("Ethel", v300) == true && v300 == 456);

    // test subtract function
    Map m400;
    assert(m400.insert("Fred", 123) && m400.insert("Ethel", 456) && m400.insert("Lucy", 789));
    Map m500;
    assert(m500.insert("Lucy", 789) && m500.insert("Ricky", 321) && m500.insert("Ethel", 654));
    Map result600;
    // result may not be empty when fed in
    assert(result600.insert("Lucy", 789) && result600.insert("Ricky", 321));
    subtract(m400, m500, result600);
    assert(result600.contains("Fred") && result600.get("Fred", v300) == true && v300 == 123);
    assert(!result600.contains("Ricky") && !result600.contains("Ethel") && !result600.contains("Lucy"));
    
    // test assignment operator
    m400 = result600;
    assert(!m400.contains("Ricky") && !m400.contains("Ethel") && !m400.contains("Lucy"));
    assert(m400.contains("Fred") && m400.get("Fred", v300) == true && v300 == 123);
    
    // test copy constructor
    Map m600 = result600;
    assert(!m600.contains("Ricky") && !m600.contains("Ethel") && !m600.contains("Lucy"));
    assert(m600.contains("Fred") && m600.get("Fred", v300) == true && v300 == 123);